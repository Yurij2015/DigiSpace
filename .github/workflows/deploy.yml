name: Deploy DigiSpace Website

on:
  push:
    branches: [ master ]

jobs:
  create-deployment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    outputs:
      DEPLOYMENT_MATRIX: ${{ steps.export-deployment-matrix.outputs.DEPLOYMENT_MATRIX }}
    steps:
      - uses: actions/checkout@v4
      - uses: nanasess/setup-php@v4
      - name: Composer install
        run: |
          composer install --no-dev --no-interaction --prefer-dist
      - name: Install project dependencies
        run: npm install
      - name: Build project
        run: npm run build
      - name: Configure PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml
      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

      - name: Export deployment matrix
        id: export-deployment-matrix
        run: |
          delimiter="$(openssl rand -hex 8)"
          JSON="$(cat ./deployment-config.json)"
          echo "DEPLOYMENT_MATRIX<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$JSON" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

  prepare-release-on-servers:
    name: "${{ matrix.server.name }}: Prepare release"
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-build
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY_2 }}
          port: ${{ matrix.server.port }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path }}/artifacts
      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY_2 }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            tar xzf ${{ matrix.server.path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            rm -rf ${{ matrix.server.path }}/releases/${GITHUB_SHA}/storage

            mkdir -p ${{ matrix.server.path }}/storage/{app,public,framework,logs}
            mkdir -p ${{ matrix.server.path }}/storage/framework/{cache,sessions,testing,views}
            chmod -R 0777 ${{ matrix.server.path }}/storage

  run-before-hooks:
    name: "${{ matrix.server.name }}: Before hook"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Run before hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
          IMG_DIR_PATH: ${{ matrix.server.path }}/current/public/images
          UPLD_IMG_DIR_PATH: ${{ matrix.server.path }}/current/public/uploads
          BANNERS_IMG_DIR_PATH: ${{ matrix.server.path }}/current/public/banners
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY_2 }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,IMG_DIR_PATH,UPLD_IMG_DIR_PATH,BANNERS_IMG_DIR_PATH
          script: |
            if [ -e "${BASE_PATH}/.env" ]; then
              cp "${BASE_PATH}/.env" "${BASE_PATH}/.env_prev"
              echo "Previous .env file saved."
            else
              echo "No .env file found for backup."
            fi

            mkdir -p "${BASE_PATH}/backup_images"

            if [ -d "${IMG_DIR_PATH}" ]; then
              cp -a "${IMG_DIR_PATH}/." "${BASE_PATH}/backup_images/"
              echo "Previous files in public/images saved."
            else
              echo "No files found in public/images for backup."
            fi

            mkdir -p "${BASE_PATH}/backup_upld_images"

            if [ -d "${UPLD_IMG_DIR_PATH}" ]; then
              cp -a "${UPLD_IMG_DIR_PATH}/." "${BASE_PATH}/backup_upld_images/"
              echo "Previous files in public/uploads saved."
            else
              echo "No files found in public/uploads for backup."
            fi

            mkdir -p "${BASE_PATH}/backup_banners_images"

            if [ -d "${BANNERS_IMG_DIR_PATH}" ]; then
              cp -a "${BANNERS_IMG_DIR_PATH}/." "${BASE_PATH}/backup_banners_images/"
              echo "Previous files in public/banners saved."
            else
              echo "No files found in public/banners for backup."
            fi

            ${{ matrix.server.beforeHooks }}

  activate-release:
    name: "${{ matrix.server.name }}: Activate release"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers, run-before-hooks ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY_2 }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,ENV_PATH,LARAVEL_ENV
          script: |
            printf "%s" "$LARAVEL_ENV" > "${BASE_PATH}/.env"
            ln -s -f ${BASE_PATH}/.env $RELEASE_PATH
            # Restore the previous .env file
            if [ -e "${BASE_PATH}/.env_prev" ]; then
              cp "${BASE_PATH}/.env_prev" "${BASE_PATH}/.env"
              echo "Restored .env file from backup."
            else
              echo "No .env backup found."
            fi
            ln -s -f $STORAGE_PATH $RELEASE_PATH
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
            systemctl reload apache2

  run-after-hooks:
    name: "${{ matrix.server.name }}: After hook"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers, run-before-hooks, activate-release ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
          IMG_DIR_PATH: ${{ matrix.server.path }}/current/public/images
          UPLD_IMG_DIR_PATH: ${{ matrix.server.path }}/current/public/uploads
          BACKUP_IMG_DIR_PATH: ${{ matrix.server.path }}/backup_images
          BACKUP_UPLD_IMG_DIR_PATH: ${{ matrix.server.path }}/backup_upld_images
          BANNERS_IMG_DIR_PATH: ${{ matrix.server.path }}/current/public/banners
          BACKUP_BANNERS_IMG_DIR_PATH: ${{ matrix.server.path }}/backup_banners_images
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY _2}}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,IMG_DIR_PATH,UPLD_IMG_DIR_PATH,BACKUP_IMG_DIR_PATH,BACKUP_UPLD_IMG_DIR_PATH,BANNERS_IMG_DIR_PATH,BACKUP_BANNERS_IMG_DIR_PATH
          script: |
            if [ -e "${BACKUP_IMG_DIR_PATH}" ]; then
              cp -a "${BACKUP_IMG_DIR_PATH}/." "${IMG_DIR_PATH}/"
              echo "Restored images from backup."
              rm -rf "${BACKUP_IMG_DIR_PATH}"
              echo "Removed backup img dir."
            else
              echo "No images dir backup found."
            fi

            if [ -e "${BACKUP_UPLD_IMG_DIR_PATH}" ]; then
              cp -a "${BACKUP_UPLD_IMG_DIR_PATH}/." "${UPLD_IMG_DIR_PATH}/"
              echo "Restored upload images from backup."
              rm -rf "${BACKUP_UPLD_IMG_DIR_PATH}"
              echo "Removed backup upld img dir."
            else
              echo "No upload images dir backup found."
            fi

            if [ -e "${BACKUP_BANNERS_IMG_DIR_PATH}" ]; then
              cp -a "${BACKUP_BANNERS_IMG_DIR_PATH}/." "${BANNERS_IMG_DIR_PATH}/"
              echo "Restored banners images from backup."
              rm -rf "${BACKUP_BANNERS_IMG_DIR_PATH}"
              echo "Removed banners img dir."
            else
              echo "No banners images dir backup found."
            fi

            ${{ matrix.server.afterHooks }}

  clean-up:
    name: "${{ matrix.server.name }}: Clean up"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-servers, run-before-hooks, activate-release, run-after-hooks ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          RELEASES_PATH: ${{ matrix.server.path }}/releases
          ARTIFACTS_PATH: ${{ matrix.server.path }}/artifacts
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY_2 }}
          port: ${{ matrix.server.port }}
          envs: RELEASES_PATH
          script: |
            cd $RELEASES_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
